<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on win32)" generated="20190610 15:14:03.410" rpa="false">
<suite id="s1" name="Put request" source="C:\Users\ryynapet\git\Rest_API_Testing_using_Robot_Framework\Rest_API_Testing_using_Robot_Framework\REST_API_Testing\Tests\Put_request.robot">
<test id="s1-t1" name="Create new user">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${BASE_URL}</arg>
</arguments>
<msg timestamp="20190610 15:14:03.771" level="INFO">Creating Session using : alias=session, url=https://reqres.in, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190610 15:14:03.770" endtime="20190610 15:14:03.771"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${request_folder}/${request_file}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20190610 15:14:03.772" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\ryynapet\git\Rest_API_Testing_using_Robot_Framework\Rest_API_Testing_using_Robot_Framework\REST_API_Testing\Requests\Put_request.json"&gt;C:\Users\ryynapet\git\Rest_API_Testing_using_Robot_Framework\Rest_API_Testing_using_Robot_Framework\REST_API_Testing\Requests\Put_request.json&lt;/a&gt;'.</msg>
<msg timestamp="20190610 15:14:03.772" level="INFO">${request_body} = {
    "name": "morpheus",
    "job": "zion resident"
}</msg>
<status status="PASS" starttime="20190610 15:14:03.771" endtime="20190610 15:14:03.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>&amp;{header}</var>
</assign>
<msg timestamp="20190610 15:14:03.773" level="INFO">&amp;{header} = { Content-Type=application/json }</msg>
<status status="PASS" starttime="20190610 15:14:03.773" endtime="20190610 15:14:03.773"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>session</arg>
<arg>${PUT_URI}</arg>
<arg>${request_body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190610 15:14:03.924" level="INFO">Put Request using : alias=session, uri=/api/users/2, data={
    "name": "morpheus",
    "job": "zion resident"
},                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190610 15:14:03.924" level="INFO">c:\users\ryynapet\appdata\local\programs\python\python37-32\lib\site-packages\urllib3\connectionpool.py:847: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  InsecureRequestWarning)</msg>
<msg timestamp="20190610 15:14:03.931" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190610 15:14:03.774" endtime="20190610 15:14:03.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20190610 15:14:03.934" level="INFO">{"updatedAt":"2019-06-10T12:14:03.911Z"}</msg>
<status status="PASS" starttime="20190610 15:14:03.933" endtime="20190610 15:14:03.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190610 15:14:03.937" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190610 15:14:03.936" endtime="20190610 15:14:03.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.text}</arg>
<arg>updatedAt</arg>
</arguments>
<status status="PASS" starttime="20190610 15:14:03.938" endtime="20190610 15:14:03.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.text}</arg>
<arg>true</arg>
</arguments>
<assign>
<var>${pretty_printed_response}</var>
</assign>
<msg timestamp="20190610 15:14:03.942" level="INFO">To JSON using : content={"updatedAt":"2019-06-10T12:14:03.911Z"} </msg>
<msg timestamp="20190610 15:14:03.942" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20190610 15:14:03.943" level="INFO">${pretty_printed_response} = {
    "updatedAt": "2019-06-10T12:14:03.911Z"
}</msg>
<status status="PASS" starttime="20190610 15:14:03.941" endtime="20190610 15:14:03.943"></status>
</kw>
<kw name="Create Binary File" library="OperatingSystem">
<doc>Creates a binary file with the given content.</doc>
<arguments>
<arg>${response_folder}/Put_response.json</arg>
<arg>${pretty_printed_response}</arg>
</arguments>
<msg timestamp="20190610 15:14:03.957" level="INFO" html="yes">Created binary file '&lt;a href="file://C:\Users\ryynapet\git\Rest_API_Testing_using_Robot_Framework\Rest_API_Testing_using_Robot_Framework\REST_API_Testing\Response\Put_response.json"&gt;C:\Users\ryynapet\git\Rest_API_Testing_using_Robot_Framework\Rest_API_Testing_using_Robot_Framework\REST_API_Testing\Response\Put_response.json&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20190610 15:14:03.944" endtime="20190610 15:14:03.957"></status>
</kw>
<status status="PASS" starttime="20190610 15:14:03.770" endtime="20190610 15:14:03.974" critical="yes"></status>
</test>
<status status="PASS" starttime="20190610 15:14:03.414" endtime="20190610 15:14:03.977"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Put request">Put request</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
